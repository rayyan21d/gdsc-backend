// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId         String    @id @default(uuid())
  memberId       Int       @unique
  hashedPassword String
  firstName      String
  lastName       String?
  email          String
  phone          String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  posts          Post[]
  profile        Profile?
  comments       Comment[]
}

enum Role {
  ADMIN
  USER
  MOD
}

enum Vis {
  PUBLIC
  PRIVATE
}

model Post {
  postId       Int       @id @unique @default(autoincrement())
  creatorId    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  creator      User      @relation(fields: [creatorId], references: [userId])
  title        String
  content      String
  comments     Comment[]
  visibility   Vis       @default(PRIVATE)
  event        Event?    @relation(fields: [eventEventId], references: [eventId])
  eventEventId Int?
}

model Comment {
  commentId Int      @id @unique @default(autoincrement())
  postId    Int
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [userId])
  createdAt DateTime @default(now())
  content   String
  post      Post     @relation(fields: [postId], references: [postId])
}

// Profile Information data model
model Profile {
  profileId      String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [userId])
  bio            String
  profilePicture String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  interests      String[]
  events         String[]
  socials        String[]
  projects       String[]
  roles          String[]
}

// Event data model
model Event {
  eventId     Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // A relation which is an event can have many organizers
  creatorId   String
  organizers  String[]
  volunteers  String[]
  speakers    String[]
  postIds     Int
  posts       Post[]
}

model Project {
  projectId     Int      @id @default(autoincrement())
  title         String
  description   String
  creatorId     Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creator       String
  collaborators String[]
  events        String[]
  tags          String[]
}
